volumes:
  source_connector_data:
  sink_connector_data:
  kafka_data:

networks:
   kafka_connect_network:
   mysql_traceability_network:
      external: true

services:
   kafka-connect:
      build: 
         context: ./docker/builds/connectors
         args: 
            - ARG_MYSQL_SOURCE_ROOT_PASSWORD=${MYSQL_SOURCE_ROOT_PASSWORD}
            - ARG_MYSQL_SOURCE_USR_NAME=${MYSQL_SOURCE_USR_NAME}
            - ARG_MYSQL_SOURCE_USR_PWD=${MYSQL_SOURCE_USR_PWD}
      container_name: kafka-connect-container
      ports:
         - "8083:8083"
      volumes:
         - source_connector_data:/etc/kafka-connect/jdbc/source-connector
         - sink_connector_data:/etc/kafka-connect/jdbc/sink-connector
      environment:
         - CONNECT_BOOTSTRAP_SERVERS=kafka0:29092
         - CONNECT_REST_PORT=8083
         - CONNECT_GROUP_ID=connect-cluster
         - CONNECT_CONFIG_STORAGE_TOPIC=connect-configs
         - CONNECT_OFFSET_STORAGE_TOPIC=connect-offsets
         - CONNECT_STATUS_STORAGE_TOPIC=connect-status
         - CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR=1
         - CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR=1
         - CONNECT_STATUS_STORAGE_REPLICATION_FACTOR=1
         - CONNECT_KEY_CONVERTER=io.confluent.connect.avro.AvroConverter
         - CONNECT_VALUE_CONVERTER=io.confluent.connect.avro.AvroConverter
         - CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL= 'http://schemaregistry0:8085'
         - CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL= 'http://schemaregistry0:8085' 
         - CONNECT_REST_ADVERTISED_HOST_NAME=localhost
         #- CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=true //include lo schema nel messaggio, ma usando l'AVRO non ce n'è bisogno
      networks:
         - "mysql_traceability_network"
         - "kafka_connect_network"
      depends_on:
         - kafka0
         - schemaregistry0
      command:
         - bash
         - -c
         - |
            #
            echo "Launching Kafka Connect worker"
            /etc/confluent/docker/run &
            #
            echo "Waiting for Kafka Connect to start listening on 0.0.0.0:8083 ⏳"
            while : ; do
               curl_status=$$(curl -s -o /dev/null -w %{http_code} http://kafka-connect:8083/connectors)
               echo -e $$(date) " Kafka Connect listener HTTP state: " $$curl_status " (waiting for 200)"
               if [ $$curl_status -eq 200 ] ; then
               break
               fi
               sleep 5
            done
            sleep infinity
            
#echo "Plugins disponibili..."
#curl -s -X GET http://kafka-connect:8083/connector-plugins | jq '.[].class'
            
#echo "Starting source..."
#sleep 5
#curl http://kafka-connect:8083/connectors -H 'Content-Type: application/json' -X POST -d '@/etc/kafka-connect/jdbc/source.json'
#sleep 5
#echo "Starting sink personalized..."
#curl http://kafka-connect:8083/connectors -H 'Content-Type: application/json' -X POST -d '@/etc/kafka-connect/jdbc/sink.json'
#sleep infinity
     

   kafka-ui: #localhost:8081/kafkaui
      container_name: kafka-ui
      image: provectuslabs/kafka-ui:latest
      ports:
         - 8081:8080
      depends_on:
         - kafka0
         - schemaregistry0
      environment:
         KAFKA_CLUSTERS_0_NAME: local
         KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka0:29092
         KAFKA_CLUSTERS_0_METRICS_PORT: 9997
         SERVER_SERVLET_CONTEXT_PATH: /kafkaui
         AUTH_TYPE: "LOGIN_FORM"
         SPRING_SECURITY_USER_NAME: admin
         SPRING_SECURITY_USER_PASSWORD: pass
         KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schemaregistry0:8085
      networks:
         - "kafka_connect_network"

   kafka0:
      image: confluentinc/cp-kafka:7.2.1
      hostname: kafka0
      container_name: kafka0
      ports:
         - "9092:9092"
         - "9997:9997"
      healthcheck:
         test: unset JMX_PORT && KAFKA_JMX_OPTS="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka0 -Dcom.sun.management.jmxremote.rmi.port=9999" && kafka-broker-api-versions --bootstrap-server=localhost:9092
         interval: 30s
         timeout: 10s
         retries: 10
      environment:
         KAFKA_BROKER_ID: 1
         KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
         KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka0:29092,PLAINTEXT_HOST://localhost:9092'
         KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
         KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
         KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
         KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
         KAFKA_JMX_PORT: 9997
         KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka0 -Dcom.sun.management.jmxremote.rmi.port=9997
         KAFKA_PROCESS_ROLES: 'broker,controller'
         KAFKA_NODE_ID: 1
         KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka0:29093'
         KAFKA_LISTENERS: 'PLAINTEXT://kafka0:29092,CONTROLLER://kafka0:29093,PLAINTEXT_HOST://0.0.0.0:9092'
         KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
         KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
         KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      volumes:
         - ./scripts/update_run.sh:/tmp/update_run.sh
         - kafka_data:/var/lib/kafka/data
      networks:
         - "kafka_connect_network"
      command: "bash -c 'if [ ! -f /tmp/update_run.sh ]; then echo \"ERROR: Did you forget the update_run.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /tmp/update_run.sh && /etc/confluent/docker/run ; fi'"

   schemaregistry0:
      image: confluentinc/cp-schema-registry:7.2.1
      ports:
         - 8085:8085
      depends_on:
         kafka0:
            condition: service_healthy
      healthcheck:
         test: [ "CMD", "timeout", "1", "curl", "--silent", "--fail", "http://schemaregistry0:8085/subjects" ]
         interval: 30s
         timeout: 10s
         retries: 10
      environment:
         SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka0:29092
         SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
         SCHEMA_REGISTRY_HOST_NAME: schemaregistry0
         SCHEMA_REGISTRY_LISTENERS: http://schemaregistry0:8085

         SCHEMA_REGISTRY_SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL: "http"
         SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
         SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
      networks:
         - "kafka_connect_network"